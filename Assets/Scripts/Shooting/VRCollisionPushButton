using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class VRCollisionPushButton : MonoBehaviour
{
    [SerializeField] private AudioClip buttonPressSound;
    [SerializeField] private float pressDepth = 0.02f;
    [SerializeField] private float pressCooldown = 0.5f;

    // Unity Event that can be configured in Inspector
    public UnityEngine.Events.UnityEvent onButtonPressed;

    private AudioSource audioSource;
    private Vector3 originalPosition;
    private bool canPress = true;

    private void Awake()
    {
        // Get or add AudioSource
        audioSource = GetComponent<AudioSource>() ?? gameObject.AddComponent<AudioSource>();
        originalPosition = transform.localPosition;
    }

    private void OnCollisionEnter(Collision collision)
    {
        // Check if the collision is from a VR controller or hand
        if (canPress && IsValidInteractor(collision.gameObject))
        {
            PressButton();
        }
    }

    private bool IsValidInteractor(GameObject collidingObject)
    {
        // Add logic to check if the colliding object is a VR controller or hand
        return collidingObject.GetComponent<XRBaseController>() != null || 
               collidingObject.GetComponent<XRDirectInteractor>() != null;
    }

    private void PressButton()
    {
        // Prevent rapid repeated presses
        canPress = false;

        // Play sound effect
        if (buttonPressSound != null)
        {
            audioSource.PlayOneShot(buttonPressSound);
        }

        // Trigger event
        onButtonPressed?.Invoke();

        // Visual and physical button press
        StartCoroutine(ButtonPressAnimation());
    }

    private IEnumerator ButtonPressAnimation()
    {
        // Press down
        transform.localPosition -= new Vector3(0, pressDepth, 0);
        
        // Wait
        yield return new WaitForSeconds(0.1f);
        
        // Return to original position
        transform.localPosition = originalPosition;

        // Cooldown before next press
        yield return new WaitForSeconds(pressCooldown);
        canPress = true;
    }
}